# This script will perform a clustering of elements based on their
# distance.
#
# input : "distance": either a full m*m distance matrix or the upper
#                     triangular matrix of m*(m-1)/2 elements
#         "minClusters": the minimum desired number of clusters
#         "maxClusters": the minimum desired number of clusters
#         "m"       : the number of elements to cluster
#
# output: "clusters": the assignment of instances to clusters
#         "quality" : the quality measure
#
safeExec({#
#
# 0. load packages
hasPackageStats<-safeUsePackage("stats");
hasPackageCluster<-safeUsePackage("cluster");
#
# 1. Building Distance Matrix
dimDist<-dim(distance);
#
if((m != 1) && ((dimDist[1]==1) || (dimDist[2]==1))) {
  # Only a distance vector was supplied.
  # We transform it first to a full distance matrix, then
  # to a `dist` object.
  distanceMatrix <- matrix(NA, ncol=m, nrow=m);
  distanceMatrix[lower.tri(distanceMatrix)] <- distance;
  distance <- as.dist(distanceMatrix);
  rm(distanceMatrix);
} else {
  # A full distance matrix was supplied, transform to `dist`
  # object directly.
  distance <- as.dist(distance);
}# / distance matrix building
#
## 2. Clustering Step
#
## 2.1. Use Partitioning Around Medoids
if(minClusters >= maxClusters) {#
  if(hasPackageCluster) {
    safeExec(pamResult<-pam(x=distance, k=minClusters, diss=TRUE));
  }
} else {
  if(safeUsePackage("fpc")) {
    safeExec(pamResult<-pamk(data=distance, krange=minClusters:min(m-1,maxClusters), diss=TRUE)$pamobject);
  }
}
if(exists("pamResult")) {
  clusters<-as.vector(pamResult$clustering);
  if(exists("clusters")) {
    clusterN<-max(clusters);
    if( (clusterN >= minClusters) && (clusterN <= maxClusters) ) {
      safeExec(quality<-as.double(pamResult$silinfo$avg.width));
      rm(pamResult);
      if( exists("quality") && ( (length(quality) <= 0) || (quality < -1) || (quality > 1) ) ) {
        rm(quality);
      }
      if( ((!(exists("quality"))) || (length(quality) <= 0) || (quality < -1) || (quality > 1)) && (clusterN > 1) ) {
        safeExec(quality<-as.double(cluster.stats(d=distance, clustering=clusters)$avg.silwidth))
      }
      if( (!(exists("quality"))) || (length(quality) <= 0) || (quality < -1) || (quality > 1) ) {
        quality <- as.double(-1);
      }
    } else { rm(pamResult); rm(clusters); }
  } else { rm(pamResult); }
}
#
## 2.2. Use Hierarchical Clustering
if(hasPackageStats) {
  safeExec({#
    hclustList <- list(#
      hclust(distance, method="centroid"),#
      hclust(distance, method="ward.D"),#
      hclust(distance, method="ward.D2"),#
      hclust(distance, method="single"),#
      hclust(distance, method="complete"),#
      hclust(distance, method="average"),#
      hclust(distance, method="mcquitty"),#
      hclust(distance, method="median"));#
#
      if(hasPackageCluster) {
        safeExec( hclustList <- append(hclustList, list(as.hclust(diana(distance,diss=TRUE,keep.diss=FALSE)))));
      }
#
      for(i in minClusters:min(m-1,maxClusters)) {#
        for(hres in hclustList) {#
          safeExec({ currentClusters <- as.vector(cutree(hres, k=i)); })
          if(exists("currentClusters")) {
            clusterN<-max(currentClusters);
            if( (clusterN >= minClusters) && (clusterN <= maxClusters) ) {
              if(clusterN > 1) {
                safeExec({currentQuality<-as.double(cluster.stats(d=distance, clustering=currentClusters)$avg.silwidth); })#
              } else {
                currentQuality <- as.double(-1);
              }
              if( (!(exists("currentQuality"))) || (length(currentQuality) <= 0) || (currentQuality < -1) || (currentQuality > 1) ) {
                currentQuality <- as.double(-1);
              }
              if( (!(exists("clusters"))) || (!(exists("quality")))  || (currentQuality > quality) ) {#
                quality<-currentQuality;#
                clusters<-currentClusters;#
              }
              rm(currentQuality);
            }
            rm(currentClusters);
          }#
        }#
      }#
    });
  safeExec( { rm(currentClusters); rm(currentQuality); } )
}
## 2.3. Trying with DBSCAN
if(safeUsePackage("fpc")) {
  minDist<-min(distance);
  distWidth<-(max(distance)-minDist);
  if(distWidth > 0) {
    for(multiplier in 1:90) {
      clusterN<-2;
      safeExec({#
        currentClusters <- as.vector(dbscan(data=distance, eps=(minDist+((multiplier*distWidth)/100)), MinPts=1, method="dist", seeds=FALSE, showplot=0)$cluster);
        if(min(currentClusters) > 0) {
          clusterN<-max(currentClusters);
          if( (clusterN >= minClusters) && (clusterN <= maxClusters) ) {
            if(clusterN > 1) {
              safeExec({currentQuality<-as.double(cluster.stats(d=distance, clustering=currentClusters)$avg.silwidth); })#
            } else {
              currentQuality <- as.double(-1);
            }
            if( (!(exists("currentQuality"))) || (length(currentQuality) <= 0) || (currentQuality < -1) || (currentQuality > 1) ) {
              currentQuality <- as.double(-1);
            }
            if( (!(exists("clusters"))) || (!(exists("quality")))  || (currentQuality > quality) ) {#
              quality<-currentQuality;#
              clusters<-currentClusters;#
            }
            rm(currentQuality);                
          }
        }
        rm(currentClusters);
      })
      if(clusterN<=1) { break; }
    }
  }
}
#
})# / safe exec wrapper
#
# fallback and error correction
if( (!(exists("clusters"))) || (!(is.vector(clusters))) || (length(clusters) != m) ) {
  useClusters = as.integer(0.5+(0.5*(minClusters+maxClusters)));
  clusters<-c(rep(1, m-useClusters), 1:useClusters);
  quality<-as.double(1);
} else {
  if( (!(exists("quality"))) || (length(quality) <= 0) || (quality < -1) || (quality > 1) ) {
    quality<-as.double(1);
  } else {
    quality<-as.double(max(0, min(1, (0.5-(0.5*quality)))));
  }
}